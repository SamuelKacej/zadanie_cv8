
zadanie_cv8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001810  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08001998  08001998  00011998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b04  08001b04  00020248  2**0
                  CONTENTS
  4 .ARM          00000000  08001b04  08001b04  00020248  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b04  08001b04  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b04  08001b04  00011b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b08  08001b08  00011b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08001b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000248  08001d54  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08001d54  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   000053b7  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010c9  00000000  00000000  0002562f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000550  00000000  00000000  000266f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004b8  00000000  00000000  00026c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b1b  00000000  00000000  00027100  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004075  00000000  00000000  0003dc1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000782aa  00000000  00000000  00041c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b9f3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015a0  00000000  00000000  000b9fb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000248 	.word	0x20000248
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001980 	.word	0x08001980

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000024c 	.word	0x2000024c
 80001c4:	08001980 	.word	0x08001980

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <DISPLAY_displayCurStr>:
void updCurPos(uint8_t *prevPos, uint8_t shiftDir);
void updShiftDir(uint8_t curPos, uint8_t *shiftDir);
void setCurStr(uint8_t curPos);

//functions to handle multiplexing of the currently displaying alphanum char
void DISPLAY_displayCurStr(){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	static uint8_t curActDig = 0;
	resAllDigits();
 8000206:	f000 f897 	bl	8000338 <resAllDigits>

	updAlphanumChar( segVal_ASCII[ toupper(curStr[curActDig]) - '0'] );
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <DISPLAY_displayCurStr+0x64>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	461a      	mov	r2, r3
 8000210:	4b15      	ldr	r3, [pc, #84]	; (8000268 <DISPLAY_displayCurStr+0x68>)
 8000212:	5c9b      	ldrb	r3, [r3, r2]
 8000214:	71fb      	strb	r3, [r7, #7]
 8000216:	f001 fb7d 	bl	8001914 <__locale_ctype_ptr>
 800021a:	4602      	mov	r2, r0
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	3301      	adds	r3, #1
 8000220:	4413      	add	r3, r2
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	f003 0303 	and.w	r3, r3, #3
 8000228:	2b02      	cmp	r3, #2
 800022a:	d102      	bne.n	8000232 <DISPLAY_displayCurStr+0x32>
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	3b20      	subs	r3, #32
 8000230:	e000      	b.n	8000234 <DISPLAY_displayCurStr+0x34>
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	3b30      	subs	r3, #48	; 0x30
 8000236:	4a0d      	ldr	r2, [pc, #52]	; (800026c <DISPLAY_displayCurStr+0x6c>)
 8000238:	5cd3      	ldrb	r3, [r2, r3]
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f818 	bl	8000270 <updAlphanumChar>
	setDigit(curActDig % 4);
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <DISPLAY_displayCurStr+0x64>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	f003 0303 	and.w	r3, r3, #3
 8000248:	b2db      	uxtb	r3, r3
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f83c 	bl	80002c8 <setDigit>
	curActDig++;
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <DISPLAY_displayCurStr+0x64>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	3301      	adds	r3, #1
 8000256:	b2da      	uxtb	r2, r3
 8000258:	4b02      	ldr	r3, [pc, #8]	; (8000264 <DISPLAY_displayCurStr+0x64>)
 800025a:	701a      	strb	r2, [r3, #0]
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000264 	.word	0x20000264
 8000268:	20000268 	.word	0x20000268
 800026c:	08001998 	.word	0x08001998

08000270 <updAlphanumChar>:

void updAlphanumChar(uint8_t segmentValues){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	resAllSegments();
 800027a:	f000 f83d 	bl	80002f8 <resAllSegments>
	for(int i = 0; i<(NUM_SEG-1); i++){
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e015      	b.n	80002b0 <updAlphanumChar+0x40>
		if(segmentValues & 1<<i) LL_GPIO_ResetOutputPin(seg_Ports[i], seg_Pins[i]);
 8000284:	79fa      	ldrb	r2, [r7, #7]
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	fa42 f303 	asr.w	r3, r2, r3
 800028c:	f003 0301 	and.w	r3, r3, #1
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00a      	beq.n	80002aa <updAlphanumChar+0x3a>
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <updAlphanumChar+0x50>)
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800029c:	4a09      	ldr	r2, [pc, #36]	; (80002c4 <updAlphanumChar+0x54>)
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a4:	4619      	mov	r1, r3
 80002a6:	f7ff ff9d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	for(int i = 0; i<(NUM_SEG-1); i++){
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	3301      	adds	r3, #1
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2b06      	cmp	r3, #6
 80002b4:	dde6      	ble.n	8000284 <updAlphanumChar+0x14>
	}
}
 80002b6:	bf00      	nop
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	20000018 	.word	0x20000018
 80002c4:	20000034 	.word	0x20000034

080002c8 <setDigit>:

//Turns required digit ON
void setDigit(uint8_t pos){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(dig_Ports[pos], dig_Pins[pos]);
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <setDigit+0x28>)
 80002d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <setDigit+0x2c>)
 80002de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e2:	4619      	mov	r1, r3
 80002e4:	f7ff ff70 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000050 	.word	0x20000050
 80002f4:	20000060 	.word	0x20000060

080002f8 <resAllSegments>:

/*Reset (turn-off) all the segments of display*/
void resAllSegments(){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
	for(int i = 0; i<(NUM_SEG-1); i++){
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	e00d      	b.n	8000320 <resAllSegments+0x28>
		LL_GPIO_SetOutputPin(seg_Ports[i], seg_Pins[i]);
 8000304:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <resAllSegments+0x38>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <resAllSegments+0x3c>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000314:	4619      	mov	r1, r3
 8000316:	f7ff ff57 	bl	80001c8 <LL_GPIO_SetOutputPin>
	for(int i = 0; i<(NUM_SEG-1); i++){
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	3301      	adds	r3, #1
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2b06      	cmp	r3, #6
 8000324:	ddee      	ble.n	8000304 <resAllSegments+0xc>
	}
}
 8000326:	bf00      	nop
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000018 	.word	0x20000018
 8000334:	20000034 	.word	0x20000034

08000338 <resAllDigits>:

/* Reset (turn-off) all digits*/
void resAllDigits(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
	for(int i = 0; i<(NUM_DIG-1); i++){
 800033e:	2300      	movs	r3, #0
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	e00d      	b.n	8000360 <resAllDigits+0x28>
		LL_GPIO_ResetOutputPin(dig_Ports[i], dig_Pins[i]);
 8000344:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <resAllDigits+0x38>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800034c:	4a09      	ldr	r2, [pc, #36]	; (8000374 <resAllDigits+0x3c>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000354:	4619      	mov	r1, r3
 8000356:	f7ff ff45 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	for(int i = 0; i<(NUM_DIG-1); i++){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	3301      	adds	r3, #1
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b02      	cmp	r3, #2
 8000364:	ddee      	ble.n	8000344 <resAllDigits+0xc>
	}
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000050 	.word	0x20000050
 8000374:	20000060 	.word	0x20000060

08000378 <DISPLAY_shiftCurStr>:

//Functions to handle shifting of the currently displaying string
void DISPLAY_shiftCurStr(){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	static uint8_t curPos = 0;
	static uint8_t shiftDir = LEFT_TO_RIGHT;

	updCurPos(&curPos, shiftDir);
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <DISPLAY_shiftCurStr+0x2c>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4619      	mov	r1, r3
 8000382:	4809      	ldr	r0, [pc, #36]	; (80003a8 <DISPLAY_shiftCurStr+0x30>)
 8000384:	f000 f812 	bl	80003ac <updCurPos>
	updShiftDir(curPos, &shiftDir);
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <DISPLAY_shiftCurStr+0x30>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4905      	ldr	r1, [pc, #20]	; (80003a4 <DISPLAY_shiftCurStr+0x2c>)
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f828 	bl	80003e4 <updShiftDir>
	setCurStr(curPos);
 8000394:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <DISPLAY_shiftCurStr+0x30>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f000 f841 	bl	8000420 <setCurStr>
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000070 	.word	0x20000070
 80003a8:	20000265 	.word	0x20000265

080003ac <updCurPos>:

void updCurPos(uint8_t *prevPos, uint8_t shiftDir){
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	70fb      	strb	r3, [r7, #3]
	shiftDir == LEFT_TO_RIGHT ? (*prevPos)++ : (*prevPos)--;
 80003b8:	78fb      	ldrb	r3, [r7, #3]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d106      	bne.n	80003cc <updCurPos+0x20>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	3301      	adds	r3, #1
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	701a      	strb	r2, [r3, #0]
}
 80003ca:	e005      	b.n	80003d8 <updCurPos+0x2c>
	shiftDir == LEFT_TO_RIGHT ? (*prevPos)++ : (*prevPos)--;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	701a      	strb	r2, [r3, #0]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <updShiftDir>:

void updShiftDir(uint8_t curPos, uint8_t *shiftDir){
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	6039      	str	r1, [r7, #0]
 80003ee:	71fb      	strb	r3, [r7, #7]
	if(curPos >= (complStrLen - NUM_DIG)){
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <updShiftDir+0x38>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	3b04      	subs	r3, #4
 80003f8:	429a      	cmp	r2, r3
 80003fa:	db02      	blt.n	8000402 <updShiftDir+0x1e>
		*shiftDir =  LEFT_TO_RIGHT;
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
	}

	if(curPos <= 0){
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d102      	bne.n	800040e <updShiftDir+0x2a>
		*shiftDir = RIGHT_TO_LEFT;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
	}
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	20000014 	.word	0x20000014

08000420 <setCurStr>:

void setCurStr(uint8_t curPos){
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i<NUM_DIG; i++){
 800042a:	2300      	movs	r3, #0
 800042c:	73fb      	strb	r3, [r7, #15]
 800042e:	e00a      	b.n	8000446 <setCurStr+0x26>
		curStr[i] = complStr[curPos + i];
 8000430:	79fa      	ldrb	r2, [r7, #7]
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	441a      	add	r2, r3
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	4907      	ldr	r1, [pc, #28]	; (8000458 <setCurStr+0x38>)
 800043a:	5c89      	ldrb	r1, [r1, r2]
 800043c:	4a07      	ldr	r2, [pc, #28]	; (800045c <setCurStr+0x3c>)
 800043e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<NUM_DIG; i++){
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	3301      	adds	r3, #1
 8000444:	73fb      	strb	r3, [r7, #15]
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	2b03      	cmp	r3, #3
 800044a:	d9f1      	bls.n	8000430 <setCurStr+0x10>
	}
}
 800044c:	bf00      	nop
 800044e:	3714      	adds	r7, #20
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	20000000 	.word	0x20000000
 800045c:	20000268 	.word	0x20000268

08000460 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	4907      	ldr	r1, [pc, #28]	; (800048c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4313      	orrs	r3, r2
 8000472:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000476:	695a      	ldr	r2, [r3, #20]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4013      	ands	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800047e:	68fb      	ldr	r3, [r7, #12]
}
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000

08000490 <LL_GPIO_ResetOutputPin>:
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	683a      	ldr	r2, [r7, #0]
 800049e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	463b      	mov	r3, r7
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
 80004c0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004c2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004c6:	f7ff ffcb 	bl	8000460 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80004ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80004ce:	f7ff ffc7 	bl	8000460 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segment_B_Pin|segment_A_Pin|digit_4_Pin|segment_F_Pin
 80004d2:	f640 11ff 	movw	r1, #2559	; 0x9ff
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f7ff ffd9 	bl	8000490 <LL_GPIO_ResetOutputPin>
                          |digit_2_Pin|digit_1_Pin|digit_3_Pin|digit_time_Pin
                          |segment_C_Pin|segment_E_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, segment_DP_Pin|segment_G_Pin|segment_D_Pin);
 80004de:	2132      	movs	r1, #50	; 0x32
 80004e0:	4813      	ldr	r0, [pc, #76]	; (8000530 <MX_GPIO_Init+0x84>)
 80004e2:	f7ff ffd5 	bl	8000490 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segment_B_Pin|segment_A_Pin|digit_4_Pin|segment_F_Pin
 80004e6:	f640 13ff 	movw	r3, #2559	; 0x9ff
 80004ea:	603b      	str	r3, [r7, #0]
                          |digit_2_Pin|digit_1_Pin|digit_3_Pin|digit_time_Pin
                          |segment_C_Pin|segment_E_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004ec:	2301      	movs	r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	463b      	mov	r3, r7
 80004fe:	4619      	mov	r1, r3
 8000500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000504:	f000 fd52 	bl	8000fac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = segment_DP_Pin|segment_G_Pin|segment_D_Pin;
 8000508:	2332      	movs	r3, #50	; 0x32
 800050a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800050c:	2301      	movs	r3, #1
 800050e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051c:	463b      	mov	r3, r7
 800051e:	4619      	mov	r1, r3
 8000520:	4803      	ldr	r0, [pc, #12]	; (8000530 <MX_GPIO_Init+0x84>)
 8000522:	f000 fd43 	bl	8000fac <LL_GPIO_Init>

}
 8000526:	bf00      	nop
 8000528:	3718      	adds	r7, #24
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	48000400 	.word	0x48000400

08000534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f003 0307 	and.w	r3, r3, #7
 8000542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__NVIC_SetPriorityGrouping+0x44>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800054a:	68ba      	ldr	r2, [r7, #8]
 800054c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000550:	4013      	ands	r3, r2
 8000552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800055c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000566:	4a04      	ldr	r2, [pc, #16]	; (8000578 <__NVIC_SetPriorityGrouping+0x44>)
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	60d3      	str	r3, [r2, #12]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <LL_RCC_HSI_Enable+0x1c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <LL_RCC_HSI_Enable+0x1c>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_RCC_HSI_IsReady+0x20>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	bf0c      	ite	eq
 80005ac:	2301      	moveq	r3, #1
 80005ae:	2300      	movne	r3, #0
 80005b0:	b2db      	uxtb	r3, r3
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	4904      	ldr	r1, [pc, #16]	; (80005e8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80005d6:	4313      	orrs	r3, r2
 80005d8:	600b      	str	r3, [r1, #0]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <LL_RCC_SetSysClkSource+0x24>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	f023 0203 	bic.w	r2, r3, #3
 80005fc:	4904      	ldr	r1, [pc, #16]	; (8000610 <LL_RCC_SetSysClkSource+0x24>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	604b      	str	r3, [r1, #4]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000

08000614 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <LL_RCC_GetSysClkSource+0x18>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	f003 030c 	and.w	r3, r3, #12
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000

08000630 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <LL_RCC_SetAHBPrescaler+0x24>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000640:	4904      	ldr	r1, [pc, #16]	; (8000654 <LL_RCC_SetAHBPrescaler+0x24>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4313      	orrs	r3, r2
 8000646:	604b      	str	r3, [r1, #4]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000

08000658 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000668:	4904      	ldr	r1, [pc, #16]	; (800067c <LL_RCC_SetAPB1Prescaler+0x24>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4313      	orrs	r3, r2
 800066e:	604b      	str	r3, [r1, #4]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000

08000680 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000690:	4904      	ldr	r1, [pc, #16]	; (80006a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4313      	orrs	r3, r2
 8000696:	604b      	str	r3, [r1, #4]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	40021000 	.word	0x40021000

080006a8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006b2:	69da      	ldr	r2, [r3, #28]
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006be:	69da      	ldr	r2, [r3, #28]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4013      	ands	r3, r2
 80006c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40021000 	.word	0x40021000

080006d8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006e2:	699a      	ldr	r2, [r3, #24]
 80006e4:	4907      	ldr	r1, [pc, #28]	; (8000704 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006ee:	699a      	ldr	r2, [r3, #24]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4013      	ands	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40021000 	.word	0x40021000

08000708 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <LL_FLASH_SetLatency+0x24>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f023 0207 	bic.w	r2, r3, #7
 8000718:	4904      	ldr	r1, [pc, #16]	; (800072c <LL_FLASH_SetLatency+0x24>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	600b      	str	r3, [r1, #0]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40022000 	.word	0x40022000

08000730 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <LL_FLASH_GetLatency+0x18>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f003 0307 	and.w	r3, r3, #7
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40022000 	.word	0x40022000

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ffc1 	bl	80006d8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000756:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800075a:	f7ff ffa5 	bl	80006a8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075e:	2003      	movs	r0, #3
 8000760:	f7ff fee8 	bl	8000534 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f808 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f7ff fea0 	bl	80004ac <MX_GPIO_Init>
  MX_TIM2_Init();
 800076c:	f000 fa18 	bl	8000ba0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000770:	f000 fa78 	bl	8000c64 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000774:	e7fe      	b.n	8000774 <main+0x28>
	...

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff ffc3 	bl	8000708 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000782:	bf00      	nop
 8000784:	f7ff ffd4 	bl	8000730 <LL_FLASH_GetLatency>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1fa      	bne.n	8000784 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800078e:	f7ff fef5 	bl	800057c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000792:	bf00      	nop
 8000794:	f7ff ff02 	bl	800059c <LL_RCC_HSI_IsReady>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d1fa      	bne.n	8000794 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800079e:	2010      	movs	r0, #16
 80007a0:	f7ff ff0e 	bl	80005c0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff ff43 	bl	8000630 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff ff54 	bl	8000658 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff ff65 	bl	8000680 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff ff18 	bl	80005ec <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80007bc:	bf00      	nop
 80007be:	f7ff ff29 	bl	8000614 <LL_RCC_GetSysClkSource>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1fa      	bne.n	80007be <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <SystemClock_Config+0x60>)
 80007ca:	f001 f861 	bl	8001890 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80007ce:	4802      	ldr	r0, [pc, #8]	; (80007d8 <SystemClock_Config+0x60>)
 80007d0:	f001 f86c 	bl	80018ac <LL_SetSystemCoreClock>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	007a1200 	.word	0x007a1200

080007dc <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f06f 0201 	mvn.w	r2, #1
 80007ea:	611a      	str	r2, [r3, #16]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	691b      	ldr	r3, [r3, #16]
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	2b01      	cmp	r3, #1
 800080a:	d101      	bne.n	8000810 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800080c:	2301      	movs	r3, #1
 800080e:	e000      	b.n	8000812 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <HardFault_Handler+0x4>

08000832 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <MemManage_Handler+0x4>

08000838 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <BusFault_Handler+0x4>

0800083e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <UsageFault_Handler+0x4>

08000844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 8000880:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000884:	f7ff ffb8 	bl	80007f8 <LL_TIM_IsActiveFlag_UPDATE>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d005      	beq.n	800089a <TIM2_IRQHandler+0x1e>
		DISPLAY_displayCurStr();
 800088e:	f7ff fcb7 	bl	8000200 <DISPLAY_displayCurStr>
		LL_TIM_ClearFlag_UPDATE(TIM2);
 8000892:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000896:	f7ff ffa1 	bl	80007dc <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 80008a4:	4806      	ldr	r0, [pc, #24]	; (80008c0 <TIM3_IRQHandler+0x20>)
 80008a6:	f7ff ffa7 	bl	80007f8 <LL_TIM_IsActiveFlag_UPDATE>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d004      	beq.n	80008ba <TIM3_IRQHandler+0x1a>
		DISPLAY_shiftCurStr();
 80008b0:	f7ff fd62 	bl	8000378 <DISPLAY_shiftCurStr>
		LL_TIM_ClearFlag_UPDATE(TIM3);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <TIM3_IRQHandler+0x20>)
 80008b6:	f7ff ff91 	bl	80007dc <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40000400 	.word	0x40000400

080008c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <SystemInit+0x20>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <SystemInit+0x20>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <__NVIC_GetPriorityGrouping+0x18>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	f003 0307 	and.w	r3, r3, #7
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	db0b      	blt.n	800092e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	f003 021f 	and.w	r2, r3, #31
 800091c:	4907      	ldr	r1, [pc, #28]	; (800093c <__NVIC_EnableIRQ+0x38>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	095b      	lsrs	r3, r3, #5
 8000924:	2001      	movs	r0, #1
 8000926:	fa00 f202 	lsl.w	r2, r0, r2
 800092a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000e100 	.word	0xe000e100

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db0a      	blt.n	800096a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	490c      	ldr	r1, [pc, #48]	; (800098c <__NVIC_SetPriority+0x4c>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000968:	e00a      	b.n	8000980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <__NVIC_SetPriority+0x50>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	3b04      	subs	r3, #4
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	440b      	add	r3, r1
 800097e:	761a      	strb	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f1c3 0307 	rsb	r3, r3, #7
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	bf28      	it	cs
 80009b2:	2304      	movcs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3304      	adds	r3, #4
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d902      	bls.n	80009c4 <NVIC_EncodePriority+0x30>
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3b03      	subs	r3, #3
 80009c2:	e000      	b.n	80009c6 <NVIC_EncodePriority+0x32>
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43d9      	mvns	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	4313      	orrs	r3, r2
         );
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	; 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <LL_APB1_GRP1_EnableClock>:
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a06:	69da      	ldr	r2, [r3, #28]
 8000a08:	4907      	ldr	r1, [pc, #28]	; (8000a28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a12:	69da      	ldr	r2, [r3, #28]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4013      	ands	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40021000 	.word	0x40021000

08000a2c <LL_TIM_EnableCounter>:
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f043 0201 	orr.w	r2, r3, #1
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <LL_TIM_DisableARRPreload>:
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_TIM_OC_DisableFast>:
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d028      	beq.n	8000ace <LL_TIM_OC_DisableFast+0x62>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	d023      	beq.n	8000aca <LL_TIM_OC_DisableFast+0x5e>
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2b10      	cmp	r3, #16
 8000a86:	d01e      	beq.n	8000ac6 <LL_TIM_OC_DisableFast+0x5a>
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	2b40      	cmp	r3, #64	; 0x40
 8000a8c:	d019      	beq.n	8000ac2 <LL_TIM_OC_DisableFast+0x56>
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a94:	d013      	beq.n	8000abe <LL_TIM_OC_DisableFast+0x52>
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a9c:	d00d      	beq.n	8000aba <LL_TIM_OC_DisableFast+0x4e>
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aa4:	d007      	beq.n	8000ab6 <LL_TIM_OC_DisableFast+0x4a>
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aac:	d101      	bne.n	8000ab2 <LL_TIM_OC_DisableFast+0x46>
 8000aae:	2307      	movs	r3, #7
 8000ab0:	e00e      	b.n	8000ad0 <LL_TIM_OC_DisableFast+0x64>
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	e00c      	b.n	8000ad0 <LL_TIM_OC_DisableFast+0x64>
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	e00a      	b.n	8000ad0 <LL_TIM_OC_DisableFast+0x64>
 8000aba:	2305      	movs	r3, #5
 8000abc:	e008      	b.n	8000ad0 <LL_TIM_OC_DisableFast+0x64>
 8000abe:	2304      	movs	r3, #4
 8000ac0:	e006      	b.n	8000ad0 <LL_TIM_OC_DisableFast+0x64>
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e004      	b.n	8000ad0 <LL_TIM_OC_DisableFast+0x64>
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	e002      	b.n	8000ad0 <LL_TIM_OC_DisableFast+0x64>
 8000aca:	2301      	movs	r3, #1
 8000acc:	e000      	b.n	8000ad0 <LL_TIM_OC_DisableFast+0x64>
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3318      	adds	r3, #24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <LL_TIM_OC_DisableFast+0x9c>)
 8000adc:	5cd3      	ldrb	r3, [r2, r3]
 8000ade:	440b      	add	r3, r1
 8000ae0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	4908      	ldr	r1, [pc, #32]	; (8000b0c <LL_TIM_OC_DisableFast+0xa0>)
 8000aea:	5ccb      	ldrb	r3, [r1, r3]
 8000aec:	4619      	mov	r1, r3
 8000aee:	2304      	movs	r3, #4
 8000af0:	408b      	lsls	r3, r1
 8000af2:	43db      	mvns	r3, r3
 8000af4:	401a      	ands	r2, r3
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	601a      	str	r2, [r3, #0]
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	080019e4 	.word	0x080019e4
 8000b0c:	080019f0 	.word	0x080019f0

08000b10 <LL_TIM_SetClockSource>:
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000b22:	f023 0307 	bic.w	r3, r3, #7
 8000b26:	683a      	ldr	r2, [r7, #0]
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <LL_TIM_SetTriggerOutput>:
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	605a      	str	r2, [r3, #4]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <LL_TIM_DisableMasterSlaveMode>:
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	609a      	str	r2, [r3, #8]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	f043 0201 	orr.w	r2, r3, #1
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	60da      	str	r2, [r3, #12]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <MX_TIM2_Init>:
void add_TIM3_Init(void);
/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2220      	movs	r2, #32
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fec9 	bl	8001954 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff ff1a 	bl	80009fc <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000bc8:	f7ff fe8e 	bl	80008e8 <__NVIC_GetPriorityGrouping>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fede 	bl	8000994 <NVIC_EncodePriority>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	201c      	movs	r0, #28
 8000bde:	f7ff feaf 	bl	8000940 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000be2:	201c      	movs	r0, #28
 8000be4:	f7ff fe8e 	bl	8000904 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 8000;
 8000be8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000bec:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 20;
 8000bf2:	2314      	movs	r3, #20
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c04:	f000 fad2 	bl	80011ac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000c08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c0c:	f7ff ff1e 	bl	8000a4c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000c10:	2100      	movs	r1, #0
 8000c12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c16:	f7ff ff7b 	bl	8000b10 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	461a      	mov	r2, r3
 8000c32:	2101      	movs	r1, #1
 8000c34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c38:	f000 fb2a 	bl	8001290 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c42:	f7ff ff13 	bl	8000a6c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000c46:	2100      	movs	r1, #0
 8000c48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c4c:	f7ff ff75 	bl	8000b3a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000c50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c54:	f7ff ff84 	bl	8000b60 <LL_TIM_DisableMasterSlaveMode>

  add_TIM2_Init();
 8000c58:	f000 f862 	bl	8000d20 <add_TIM2_Init>
}
 8000c5c:	bf00      	nop
 8000c5e:	3738      	adds	r7, #56	; 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fe67 	bl	8001954 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000c86:	2002      	movs	r0, #2
 8000c88:	f7ff feb8 	bl	80009fc <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c8c:	f7ff fe2c 	bl	80008e8 <__NVIC_GetPriorityGrouping>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fe7c 	bl	8000994 <NVIC_EncodePriority>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	201d      	movs	r0, #29
 8000ca2:	f7ff fe4d 	bl	8000940 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8000ca6:	201d      	movs	r0, #29
 8000ca8:	f7ff fe2c 	bl	8000904 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 8000;
 8000cac:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000cb0:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 500;
 8000cb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4815      	ldr	r0, [pc, #84]	; (8000d1c <MX_TIM3_Init+0xb8>)
 8000cc8:	f000 fa70 	bl	80011ac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8000ccc:	4813      	ldr	r0, [pc, #76]	; (8000d1c <MX_TIM3_Init+0xb8>)
 8000cce:	f7ff febd 	bl	8000a4c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4811      	ldr	r0, [pc, #68]	; (8000d1c <MX_TIM3_Init+0xb8>)
 8000cd6:	f7ff ff1b 	bl	8000b10 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8000cda:	2310      	movs	r3, #16
 8000cdc:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <MX_TIM3_Init+0xb8>)
 8000cf6:	f000 facb 	bl	8001290 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4807      	ldr	r0, [pc, #28]	; (8000d1c <MX_TIM3_Init+0xb8>)
 8000cfe:	f7ff feb5 	bl	8000a6c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8000d02:	2100      	movs	r1, #0
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_TIM3_Init+0xb8>)
 8000d06:	f7ff ff18 	bl	8000b3a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8000d0a:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_TIM3_Init+0xb8>)
 8000d0c:	f7ff ff28 	bl	8000b60 <LL_TIM_DisableMasterSlaveMode>

  add_TIM3_Init();
 8000d10:	f000 f812 	bl	8000d38 <add_TIM3_Init>
}
 8000d14:	bf00      	nop
 8000d16:	3738      	adds	r7, #56	; 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40000400 	.word	0x40000400

08000d20 <add_TIM2_Init>:

/* USER CODE BEGIN 1 */
void add_TIM2_Init(void){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM2);
 8000d24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d28:	f7ff ff2a 	bl	8000b80 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM2);
 8000d2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d30:	f7ff fe7c 	bl	8000a2c <LL_TIM_EnableCounter>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <add_TIM3_Init>:

void add_TIM3_Init(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM3);
 8000d3c:	4803      	ldr	r0, [pc, #12]	; (8000d4c <add_TIM3_Init+0x14>)
 8000d3e:	f7ff ff1f 	bl	8000b80 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM3);
 8000d42:	4802      	ldr	r0, [pc, #8]	; (8000d4c <add_TIM3_Init+0x14>)
 8000d44:	f7ff fe72 	bl	8000a2c <LL_TIM_EnableCounter>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40000400 	.word	0x40000400

08000d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d56:	490e      	ldr	r1, [pc, #56]	; (8000d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d58:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <LoopForever+0xe>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d6c:	4c0b      	ldr	r4, [pc, #44]	; (8000d9c <LoopForever+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d7a:	f7ff fda3 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7e:	f000 fda5 	bl	80018cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d82:	f7ff fce3 	bl	800074c <main>

08000d86 <LoopForever>:

LoopForever:
    b LoopForever
 8000d86:	e7fe      	b.n	8000d86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d88:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8000d94:	08001b0c 	.word	0x08001b0c
  ldr r2, =_sbss
 8000d98:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8000d9c:	2000026c 	.word	0x2000026c

08000da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_2_IRQHandler>

08000da2 <LL_GPIO_SetPinMode>:
{
 8000da2:	b480      	push	{r7}
 8000da4:	b089      	sub	sp, #36	; 0x24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa93 f3a3 	rbit	r3, r3
 8000dbc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2103      	movs	r1, #3
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa93 f3a3 	rbit	r3, r3
 8000ddc:	61bb      	str	r3, [r7, #24]
  return result;
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	fab3 f383 	clz	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	431a      	orrs	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	bf00      	nop
 8000df6:	3724      	adds	r7, #36	; 0x24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <LL_GPIO_SetPinOutputType>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	401a      	ands	r2, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	fb01 f303 	mul.w	r3, r1, r3
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	605a      	str	r2, [r3, #4]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_GPIO_SetPinSpeed>:
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa93 f3a3 	rbit	r3, r3
 8000e4a:	613b      	str	r3, [r7, #16]
  return result;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	fab3 f383 	clz	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2103      	movs	r1, #3
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	401a      	ands	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	61bb      	str	r3, [r7, #24]
  return result;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	609a      	str	r2, [r3, #8]
}
 8000e82:	bf00      	nop
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LL_GPIO_SetPinPull>:
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b089      	sub	sp, #36	; 0x24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	613b      	str	r3, [r7, #16]
  return result;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa93 f3a3 	rbit	r3, r3
 8000ec8:	61bb      	str	r3, [r7, #24]
  return result;
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	fab3 f383 	clz	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	431a      	orrs	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	60da      	str	r2, [r3, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3724      	adds	r7, #36	; 0x24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <LL_GPIO_SetAFPin_0_7>:
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6a1a      	ldr	r2, [r3, #32]
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	613b      	str	r3, [r7, #16]
  return result;
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	fab3 f383 	clz	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	210f      	movs	r1, #15
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	61bb      	str	r3, [r7, #24]
  return result;
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fab3 f383 	clz	r3, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	621a      	str	r2, [r3, #32]
}
 8000f3e:	bf00      	nop
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_GPIO_SetAFPin_8_15>:
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b089      	sub	sp, #36	; 0x24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa93 f3a3 	rbit	r3, r3
 8000f66:	613b      	str	r3, [r7, #16]
  return result;
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	fab3 f383 	clz	r3, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	210f      	movs	r1, #15
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	61bb      	str	r3, [r7, #24]
  return result;
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	fab3 f383 	clz	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fa0:	bf00      	nop
 8000fa2:	3724      	adds	r7, #36	; 0x24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	613b      	str	r3, [r7, #16]
  return result;
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	fab3 f383 	clz	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000fce:	e051      	b.n	8001074 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d043      	beq.n	800106e <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d003      	beq.n	8000ff6 <LL_GPIO_Init+0x4a>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d10e      	bne.n	8001014 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	69b9      	ldr	r1, [r7, #24]
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ff16 	bl	8000e30 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	6819      	ldr	r1, [r3, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	461a      	mov	r2, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fef6 	bl	8000e00 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	461a      	mov	r2, r3
 800101a:	69b9      	ldr	r1, [r7, #24]
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff36 	bl	8000e8e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d11a      	bne.n	8001060 <LL_GPIO_Init+0xb4>
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	60bb      	str	r3, [r7, #8]
  return result;
 8001036:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b07      	cmp	r3, #7
 8001040:	d807      	bhi.n	8001052 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	461a      	mov	r2, r3
 8001048:	69b9      	ldr	r1, [r7, #24]
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff4e 	bl	8000eec <LL_GPIO_SetAFPin_0_7>
 8001050:	e006      	b.n	8001060 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	461a      	mov	r2, r3
 8001058:	69b9      	ldr	r1, [r7, #24]
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff75 	bl	8000f4a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	461a      	mov	r2, r3
 8001066:	69b9      	ldr	r1, [r7, #24]
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff fe9a 	bl	8000da2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3301      	adds	r3, #1
 8001072:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	fa22 f303 	lsr.w	r3, r2, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1a6      	bne.n	8000fd0 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <LL_TIM_SetPrescaler>:
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_TIM_SetAutoReload>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_TIM_SetRepetitionCounter>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_TIM_OC_SetCompareCH1>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_TIM_OC_SetCompareCH2>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_TIM_OC_SetCompareCH3>:
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_TIM_OC_SetCompareCH4>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_TIM_OC_SetCompareCH5>:
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_TIM_OC_SetCompareCH6>:
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	f043 0201 	orr.w	r2, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	615a      	str	r2, [r3, #20]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <LL_TIM_Init+0xd0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d007      	beq.n	80011d4 <LL_TIM_Init+0x28>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ca:	d003      	beq.n	80011d4 <LL_TIM_Init+0x28>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a2c      	ldr	r2, [pc, #176]	; (8001280 <LL_TIM_Init+0xd4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d106      	bne.n	80011e2 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4313      	orrs	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a25      	ldr	r2, [pc, #148]	; (800127c <LL_TIM_Init+0xd0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <LL_TIM_Init+0x66>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f0:	d00f      	beq.n	8001212 <LL_TIM_Init+0x66>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a22      	ldr	r2, [pc, #136]	; (8001280 <LL_TIM_Init+0xd4>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00b      	beq.n	8001212 <LL_TIM_Init+0x66>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a21      	ldr	r2, [pc, #132]	; (8001284 <LL_TIM_Init+0xd8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <LL_TIM_Init+0x66>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a20      	ldr	r2, [pc, #128]	; (8001288 <LL_TIM_Init+0xdc>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d003      	beq.n	8001212 <LL_TIM_Init+0x66>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a1f      	ldr	r2, [pc, #124]	; (800128c <LL_TIM_Init+0xe0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d106      	bne.n	8001220 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	4619      	mov	r1, r3
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff3b 	bl	80010a8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	4619      	mov	r1, r3
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff27 	bl	800108c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <LL_TIM_Init+0xd0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00b      	beq.n	800125e <LL_TIM_Init+0xb2>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <LL_TIM_Init+0xd8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <LL_TIM_Init+0xb2>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <LL_TIM_Init+0xdc>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d003      	beq.n	800125e <LL_TIM_Init+0xb2>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a0c      	ldr	r2, [pc, #48]	; (800128c <LL_TIM_Init+0xe0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d105      	bne.n	800126a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	4619      	mov	r1, r3
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff2d 	bl	80010c4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff8e 	bl	800118c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40012c00 	.word	0x40012c00
 8001280:	40000400 	.word	0x40000400
 8001284:	40014000 	.word	0x40014000
 8001288:	40014400 	.word	0x40014400
 800128c:	40014800 	.word	0x40014800

08001290 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a6:	d01f      	beq.n	80012e8 <LL_TIM_OC_Init+0x58>
 80012a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ac:	d804      	bhi.n	80012b8 <LL_TIM_OC_Init+0x28>
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d00c      	beq.n	80012cc <LL_TIM_OC_Init+0x3c>
 80012b2:	2b10      	cmp	r3, #16
 80012b4:	d011      	beq.n	80012da <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80012b6:	e033      	b.n	8001320 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80012b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012bc:	d022      	beq.n	8001304 <LL_TIM_OC_Init+0x74>
 80012be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80012c2:	d026      	beq.n	8001312 <LL_TIM_OC_Init+0x82>
 80012c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012c8:	d015      	beq.n	80012f6 <LL_TIM_OC_Init+0x66>
      break;
 80012ca:	e029      	b.n	8001320 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f000 f82c 	bl	800132c <OC1Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	75fb      	strb	r3, [r7, #23]
      break;
 80012d8:	e022      	b.n	8001320 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 f89f 	bl	8001420 <OC2Config>
 80012e2:	4603      	mov	r3, r0
 80012e4:	75fb      	strb	r3, [r7, #23]
      break;
 80012e6:	e01b      	b.n	8001320 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f916 	bl	800151c <OC3Config>
 80012f0:	4603      	mov	r3, r0
 80012f2:	75fb      	strb	r3, [r7, #23]
      break;
 80012f4:	e014      	b.n	8001320 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f000 f98d 	bl	8001618 <OC4Config>
 80012fe:	4603      	mov	r3, r0
 8001300:	75fb      	strb	r3, [r7, #23]
      break;
 8001302:	e00d      	b.n	8001320 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f9ec 	bl	80016e4 <OC5Config>
 800130c:	4603      	mov	r3, r0
 800130e:	75fb      	strb	r3, [r7, #23]
      break;
 8001310:	e006      	b.n	8001320 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 fa43 	bl	80017a0 <OC6Config>
 800131a:	4603      	mov	r3, r0
 800131c:	75fb      	strb	r3, [r7, #23]
      break;
 800131e:	bf00      	nop
  }

  return result;
 8001320:	7dfb      	ldrb	r3, [r7, #23]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	f023 0201 	bic.w	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f023 0303 	bic.w	r3, r3, #3
 800135a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	4313      	orrs	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f023 0202 	bic.w	r2, r3, #2
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f023 0201 	bic.w	r2, r3, #1
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4313      	orrs	r3, r2
 8001388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a20      	ldr	r2, [pc, #128]	; (8001410 <OC1Config+0xe4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00b      	beq.n	80013aa <OC1Config+0x7e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <OC1Config+0xe8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <OC1Config+0x7e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <OC1Config+0xec>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d003      	beq.n	80013aa <OC1Config+0x7e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <OC1Config+0xf0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d11e      	bne.n	80013e8 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f023 0208 	bic.w	r2, r3, #8
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4313      	orrs	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f023 0204 	bic.w	r2, r3, #4
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4313      	orrs	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	4619      	mov	r1, r3
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fe70 	bl	80010e0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40012c00 	.word	0x40012c00
 8001414:	40014000 	.word	0x40014000
 8001418:	40014400 	.word	0x40014400
 800141c:	40014800 	.word	0x40014800

08001420 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	f023 0210 	bic.w	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800144e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	0212      	lsls	r2, r2, #8
 8001460:	4313      	orrs	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f023 0220 	bic.w	r2, r3, #32
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4313      	orrs	r3, r2
 8001472:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f023 0210 	bic.w	r2, r3, #16
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	4313      	orrs	r3, r2
 8001482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a21      	ldr	r2, [pc, #132]	; (800150c <OC2Config+0xec>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d00b      	beq.n	80014a4 <OC2Config+0x84>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a20      	ldr	r2, [pc, #128]	; (8001510 <OC2Config+0xf0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d007      	beq.n	80014a4 <OC2Config+0x84>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <OC2Config+0xf4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d003      	beq.n	80014a4 <OC2Config+0x84>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <OC2Config+0xf8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d11f      	bne.n	80014e4 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	019b      	lsls	r3, r3, #6
 80014b0:	4313      	orrs	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	019b      	lsls	r3, r3, #6
 80014c0:	4313      	orrs	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fe00 	bl	80010fc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40012c00 	.word	0x40012c00
 8001510:	40014000 	.word	0x40014000
 8001514:	40014400 	.word	0x40014400
 8001518:	40014800 	.word	0x40014800

0800151c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f023 0303 	bic.w	r3, r3, #3
 800154a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	4313      	orrs	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	4313      	orrs	r3, r2
 800156c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	4313      	orrs	r3, r2
 800157c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a21      	ldr	r2, [pc, #132]	; (8001608 <OC3Config+0xec>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00b      	beq.n	800159e <OC3Config+0x82>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a20      	ldr	r2, [pc, #128]	; (800160c <OC3Config+0xf0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <OC3Config+0x82>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <OC3Config+0xf4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d003      	beq.n	800159e <OC3Config+0x82>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <OC3Config+0xf8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d11f      	bne.n	80015de <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	029b      	lsls	r3, r3, #10
 80015aa:	4313      	orrs	r3, r2
 80015ac:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	029b      	lsls	r3, r3, #10
 80015ba:	4313      	orrs	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	015b      	lsls	r3, r3, #5
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	4619      	mov	r1, r3
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fd91 	bl	8001118 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40012c00 	.word	0x40012c00
 800160c:	40014000 	.word	0x40014000
 8001610:	40014400 	.word	0x40014400
 8001614:	40014800 	.word	0x40014800

08001618 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800164e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	0212      	lsls	r2, r2, #8
 8001658:	4313      	orrs	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	031b      	lsls	r3, r3, #12
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	031b      	lsls	r3, r3, #12
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <OC4Config+0xbc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00b      	beq.n	800169c <OC4Config+0x84>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <OC4Config+0xc0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d007      	beq.n	800169c <OC4Config+0x84>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a13      	ldr	r2, [pc, #76]	; (80016dc <OC4Config+0xc4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d003      	beq.n	800169c <OC4Config+0x84>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <OC4Config+0xc8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d107      	bne.n	80016ac <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	019b      	lsls	r3, r3, #6
 80016a8:	4313      	orrs	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4619      	mov	r1, r3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fd38 	bl	8001134 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40012c00 	.word	0x40012c00
 80016d8:	40014000 	.word	0x40014000
 80016dc:	40014400 	.word	0x40014400
 80016e0:	40014800 	.word	0x40014800

080016e4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001704:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	4313      	orrs	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	4313      	orrs	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	041b      	lsls	r3, r3, #16
 8001734:	4313      	orrs	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <OC5Config+0xac>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d00b      	beq.n	8001758 <OC5Config+0x74>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a14      	ldr	r2, [pc, #80]	; (8001794 <OC5Config+0xb0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d007      	beq.n	8001758 <OC5Config+0x74>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a13      	ldr	r2, [pc, #76]	; (8001798 <OC5Config+0xb4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d003      	beq.n	8001758 <OC5Config+0x74>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <OC5Config+0xb8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d109      	bne.n	800176c <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fce9 	bl	8001150 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40012c00 	.word	0x40012c00
 8001794:	40014000 	.word	0x40014000
 8001798:	40014400 	.word	0x40014400
 800179c:	40014800 	.word	0x40014800

080017a0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	0212      	lsls	r2, r2, #8
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	051b      	lsls	r3, r3, #20
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	051b      	lsls	r3, r3, #20
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <OC6Config+0xac>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00b      	beq.n	8001816 <OC6Config+0x76>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a13      	ldr	r2, [pc, #76]	; (8001850 <OC6Config+0xb0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <OC6Config+0x76>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a12      	ldr	r2, [pc, #72]	; (8001854 <OC6Config+0xb4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d003      	beq.n	8001816 <OC6Config+0x76>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <OC6Config+0xb8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d109      	bne.n	800182a <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4619      	mov	r1, r3
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fc9a 	bl	8001170 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40012c00 	.word	0x40012c00
 8001850:	40014000 	.word	0x40014000
 8001854:	40014400 	.word	0x40014400
 8001858:	40014800 	.word	0x40014800

0800185c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4a07      	ldr	r2, [pc, #28]	; (800188c <LL_InitTick+0x30>)
 8001870:	3b01      	subs	r3, #1
 8001872:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <LL_InitTick+0x30>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <LL_InitTick+0x30>)
 800187c:	2205      	movs	r2, #5
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e010 	.word	0xe000e010

08001890 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001898:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffdd 	bl	800185c <LL_InitTick>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <LL_SetSystemCoreClock+0x1c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000074 	.word	0x20000074

080018cc <__libc_init_array>:
 80018cc:	b570      	push	{r4, r5, r6, lr}
 80018ce:	4e0d      	ldr	r6, [pc, #52]	; (8001904 <__libc_init_array+0x38>)
 80018d0:	4c0d      	ldr	r4, [pc, #52]	; (8001908 <__libc_init_array+0x3c>)
 80018d2:	1ba4      	subs	r4, r4, r6
 80018d4:	10a4      	asrs	r4, r4, #2
 80018d6:	2500      	movs	r5, #0
 80018d8:	42a5      	cmp	r5, r4
 80018da:	d109      	bne.n	80018f0 <__libc_init_array+0x24>
 80018dc:	4e0b      	ldr	r6, [pc, #44]	; (800190c <__libc_init_array+0x40>)
 80018de:	4c0c      	ldr	r4, [pc, #48]	; (8001910 <__libc_init_array+0x44>)
 80018e0:	f000 f84e 	bl	8001980 <_init>
 80018e4:	1ba4      	subs	r4, r4, r6
 80018e6:	10a4      	asrs	r4, r4, #2
 80018e8:	2500      	movs	r5, #0
 80018ea:	42a5      	cmp	r5, r4
 80018ec:	d105      	bne.n	80018fa <__libc_init_array+0x2e>
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
 80018f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018f4:	4798      	blx	r3
 80018f6:	3501      	adds	r5, #1
 80018f8:	e7ee      	b.n	80018d8 <__libc_init_array+0xc>
 80018fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018fe:	4798      	blx	r3
 8001900:	3501      	adds	r5, #1
 8001902:	e7f2      	b.n	80018ea <__libc_init_array+0x1e>
 8001904:	08001b04 	.word	0x08001b04
 8001908:	08001b04 	.word	0x08001b04
 800190c:	08001b04 	.word	0x08001b04
 8001910:	08001b08 	.word	0x08001b08

08001914 <__locale_ctype_ptr>:
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__locale_ctype_ptr+0x14>)
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <__locale_ctype_ptr+0x18>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf08      	it	eq
 8001920:	4613      	moveq	r3, r2
 8001922:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8001926:	4770      	bx	lr
 8001928:	20000078 	.word	0x20000078
 800192c:	200000dc 	.word	0x200000dc

08001930 <__ascii_mbtowc>:
 8001930:	b082      	sub	sp, #8
 8001932:	b901      	cbnz	r1, 8001936 <__ascii_mbtowc+0x6>
 8001934:	a901      	add	r1, sp, #4
 8001936:	b142      	cbz	r2, 800194a <__ascii_mbtowc+0x1a>
 8001938:	b14b      	cbz	r3, 800194e <__ascii_mbtowc+0x1e>
 800193a:	7813      	ldrb	r3, [r2, #0]
 800193c:	600b      	str	r3, [r1, #0]
 800193e:	7812      	ldrb	r2, [r2, #0]
 8001940:	1c10      	adds	r0, r2, #0
 8001942:	bf18      	it	ne
 8001944:	2001      	movne	r0, #1
 8001946:	b002      	add	sp, #8
 8001948:	4770      	bx	lr
 800194a:	4610      	mov	r0, r2
 800194c:	e7fb      	b.n	8001946 <__ascii_mbtowc+0x16>
 800194e:	f06f 0001 	mvn.w	r0, #1
 8001952:	e7f8      	b.n	8001946 <__ascii_mbtowc+0x16>

08001954 <memset>:
 8001954:	4402      	add	r2, r0
 8001956:	4603      	mov	r3, r0
 8001958:	4293      	cmp	r3, r2
 800195a:	d100      	bne.n	800195e <memset+0xa>
 800195c:	4770      	bx	lr
 800195e:	f803 1b01 	strb.w	r1, [r3], #1
 8001962:	e7f9      	b.n	8001958 <memset+0x4>

08001964 <__ascii_wctomb>:
 8001964:	b149      	cbz	r1, 800197a <__ascii_wctomb+0x16>
 8001966:	2aff      	cmp	r2, #255	; 0xff
 8001968:	bf85      	ittet	hi
 800196a:	238a      	movhi	r3, #138	; 0x8a
 800196c:	6003      	strhi	r3, [r0, #0]
 800196e:	700a      	strbls	r2, [r1, #0]
 8001970:	f04f 30ff 	movhi.w	r0, #4294967295
 8001974:	bf98      	it	ls
 8001976:	2001      	movls	r0, #1
 8001978:	4770      	bx	lr
 800197a:	4608      	mov	r0, r1
 800197c:	4770      	bx	lr
	...

08001980 <_init>:
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001982:	bf00      	nop
 8001984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001986:	bc08      	pop	{r3}
 8001988:	469e      	mov	lr, r3
 800198a:	4770      	bx	lr

0800198c <_fini>:
 800198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198e:	bf00      	nop
 8001990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001992:	bc08      	pop	{r3}
 8001994:	469e      	mov	lr, r3
 8001996:	4770      	bx	lr
